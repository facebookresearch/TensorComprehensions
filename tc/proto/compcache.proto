syntax = "proto2";
import "mapping_options.proto";

package tc;

message DLDataTypeProto {
  required uint32 code = 1;
  required uint32 bits = 2;
  required uint32 lanes = 3;
};

message TensorInfoProto {
  repeated uint64 shape = 1;
  repeated uint64 strides = 2;
  required uint64 alignment = 3;
  required DLDataTypeProto dtype = 4;
}

message OptionsCacheKeyProto {
  required string id = 1;
  repeated TensorInfoProto inputs = 2;
  repeated TensorInfoProto outputs = 3;
  required string device_str = 4;
  required string git_version = 5;
}

/******************************************************************************/
/* CUDA-specific cache                                                        */
/******************************************************************************/
message CudaOptionsCacheValueProto{
  required CudaMappingOptionsProto kernel_options = 1;
  repeated uint64 recorded_runtimes = 2;
}

/*
 * The options cache proto is a multimap.
 * We store the keys multiple times in the proto for now.
 * Once we measure that the caches grow too big we can improve this.
 * Note however that if the key size and the value size are of the same order of
 * magnitude, the gain will be lower than 2x (just for perspective).
 *
 * TODO: move to proto3 and use a proper map. For now ensure
 *   keys.size() == values.size() in code.
 */
message CudaOptionsCacheProto {
  repeated OptionsCacheKeyProto keys = 1;
  repeated CudaOptionsCacheValueProto values = 2;
}

/******************************************************************************/
/* CPU-specific cache                                                         */
/******************************************************************************/
message CpuOptionsCacheValueProto{
  required CpuMappingOptionsProto kernel_options = 1;
  repeated uint64 recorded_runtimes = 2;
}

/*
 * The options cache proto is a multimap.
 * We store the keys multiple times in the proto for now.
 * Once we measure that the caches grow too big we can improve this.
 * Note however that if the key size and the value size are of the same order of
 * magnitude, the gain will be lower than 2x (just for perspective).
 *
 * TODO: move to proto3 and use a proper map. For now ensure
 *   keys.size() == values.size() in code.
 */
message CpuOptionsCacheProto {
  repeated OptionsCacheKeyProto keys = 1;
  repeated CpuOptionsCacheValueProto values = 2;
}
