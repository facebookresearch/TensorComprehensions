syntax = "proto2";

package tc;

enum FusionStrategy {
  Max = 1;
  Preserve3Coincident = 2;
  Min = 3;
}

// A representation of CUDA dim3 used for grid and block structure.  x
// dimension is always required.  y and z dimensions are optional, if not
// provided, no mapping is performed on the respective blocks or threads.
// All values should be strictly positive.
message CudaDimProto {
  required uint64 x = 1;
  optional uint64 y = 2;
  optional uint64 z = 3;
}

// Options passed to isl.
message SchedulerOptionsProto {
  required FusionStrategy fusion_strategy = 1;
  required bool allow_skewing = 2;
  required bool positive_orthant = 3;
}

message TilingProto {
  repeated uint64 sizes = 1;
}

// Options for TC mapper.
message MappingOptionsProto {
  // Options for the scheduler before tiling.
  required SchedulerOptionsProto outer_schedule_options = 1;
  // Options for re-scheduling point loops.  If these options match
  // outer_schedule_options, rescheduling is not performed since it would have
  // no effect.
  required SchedulerOptionsProto intra_tile_schedule_options = 2;
  // Intersect the domain with parametric context before scheduling (may result
  // in more fusion and larger shifts, may be longer).
  required bool fix_parameters_before_scheduling = 3;
  // Tile sizes.  If empty or not provided, do not tile.
  optional TilingProto tiling = 4;
  // Unroll innermost loops to until at most "unroll" copies.  If not provided,
  // do not unroll.
  optional uint64 unroll = 7;
  // Apply tiling to imperfectly nested loops if possible.  Same tilesizes are
  // used.
  required bool tile_imperfectly_nested = 8;
  // reserved 5, 6, 9 to 13; can only activate with proto3
  // Reserved: 5, 6, 9-13 -> factored out into CudaMappingOptionsProto
  required bool match_library_calls = 14;
}

message CudaMappingOptionsProto {
  // Target-independent mapping options.
  required MappingOptionsProto generic_mapping_options = 1;
  // Block dimensions (min 1, max 3 values).
  required CudaDimProto block = 2;
  // Grid dimensions (min 1, max 3 values).
  required CudaDimProto grid = 3;
  // Generate code that copies frequently accessed elements to shared memory.
  required bool use_shared_memory = 4;
  // Generate code that copies frequently accessed elements to private memory.
  required bool use_private_memory = 5;
  // Unroll loops copying to and from shared memory.
  required bool unroll_copy_shared = 6;
  // Maximum size of shred memory to use, in bytes.  If not provided, all
  // shared memory available on the current active device will be used.
  optional uint64 max_shared_memory = 7;
  // Use the readonly cache (i.e. emit __ldg loads)
  optional bool use_readonly_cache = 8 [default = false];
}

message CpuMappingOptionsProto {
  // Target-independent mapping options.
  required MappingOptionsProto generic_mapping_options = 1;
}